import { getRangeValue, parseAlpha, } from "@tsparticles/engine";
import { lchToRgb, lchaToRgba } from "./utils.js";
export class LchColorManager {
    constructor() {
        this.key = "color";
        this.stringPrefix = "lch";
    }
    handleColor(color) {
        const colorValue = color.value, lchColor = colorValue.lch ?? color.value;
        if (lchColor.l !== undefined && lchColor.c !== undefined && lchColor.h !== undefined) {
            return lchToRgb(lchColor);
        }
    }
    handleRangeColor(color) {
        const colorValue = color.value, lchColor = colorValue.lch ?? color.value;
        if (lchColor.l !== undefined && lchColor.c !== undefined && lchColor.h !== undefined) {
            return lchToRgb({
                l: getRangeValue(lchColor.l),
                c: getRangeValue(lchColor.c),
                h: getRangeValue(lchColor.h),
            });
        }
    }
    parseString(input) {
        const isLch = input.startsWith("lch");
        if (!isLch) {
            return;
        }
        const regex = /lch\(\s*(\d+(\.\d+)?)%\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)(?:\s*\/\s*(0|1|0?\.\d+|\d{1,3}%))?\s*\)/i, result = regex.exec(input), indexes = {
            l: 1,
            c: 3,
            h: 5,
            a: 7,
        }, defaultAlpha = 1;
        return result
            ? lchaToRgba({
                a: result[indexes.a] ? parseAlpha(result[indexes.a]) : defaultAlpha,
                c: parseFloat(result[indexes.c]),
                h: parseFloat(result[indexes.h]),
                l: parseFloat(result[indexes.l]),
            })
            : undefined;
    }
}
