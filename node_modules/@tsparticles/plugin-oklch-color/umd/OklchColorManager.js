(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./utils.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OklchColorManager = void 0;
    const engine_1 = require("@tsparticles/engine");
    const utils_js_1 = require("./utils.js");
    class OklchColorManager {
        constructor() {
            this.key = "color";
            this.stringPrefix = "oklch";
        }
        handleColor(color) {
            const colorValue = color.value, oklchColor = colorValue.oklch ?? color.value;
            if (oklchColor.l !== undefined && oklchColor.c !== undefined && oklchColor.h !== undefined) {
                return (0, utils_js_1.oklchToRgb)(oklchColor);
            }
        }
        handleRangeColor(color) {
            const colorValue = color.value, oklchColor = colorValue.oklch ?? color.value;
            if (oklchColor.l !== undefined && oklchColor.c !== undefined && oklchColor.h !== undefined) {
                return (0, utils_js_1.oklchToRgb)({
                    l: (0, engine_1.getRangeValue)(oklchColor.l),
                    c: (0, engine_1.getRangeValue)(oklchColor.c),
                    h: (0, engine_1.getRangeValue)(oklchColor.h),
                });
            }
        }
        parseString(input) {
            const isOklch = input.startsWith("oklch");
            if (!isOklch) {
                return;
            }
            const regex = /oklch\(\s*(\d+(\.\d+)?)%\s+(\d+(\.\d+)?)\s+(\d+(\.\d+)?)(Â°)?(?:\s*\/\s*(0|1|0?\.\d+|\d{1,3}%))?\s*\)/i, result = regex.exec(input), indexes = {
                l: 1,
                c: 3,
                h: 5,
                a: 7,
            }, defaultAlpha = 1;
            return result
                ? (0, utils_js_1.oklchaToRgba)({
                    a: result[indexes.a] ? (0, engine_1.parseAlpha)(result[indexes.a]) : defaultAlpha,
                    c: parseFloat(result[indexes.c]),
                    h: parseFloat(result[indexes.h]),
                    l: parseFloat(result[indexes.l]),
                })
                : undefined;
        }
    }
    exports.OklchColorManager = OklchColorManager;
});
